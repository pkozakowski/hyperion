config: _NL? _nls_list{prelude_statement}? statement*

?statement: binding _NL
          | _block{with_header,statement} -> with_

?with_header: "with" namespace

_nls_list{item}: item (_NL item)* _NL?

?prelude_statement: import_ | include

import_: "import" namespace
namespace: (name ".")* name
binding: identifier "=" expr

_block{header,line}: header ":" _NL _INDENT line+ _DEDENT

include: "include" STRING

identifier: [scope "/"] [namespace "."] name
scope: (name "/")* name
name: NAME

?expr: lor_op

?atom: dict
     | list
     | tuple
     | call
     | parenthesis
     | "%" name       -> macro
     | "@" identifier -> reference
     | STRING         -> string
     | NUMBER         -> number
     | "True"         -> true
     | "False"        -> false
     | "None"         -> none

dict: _LBRACE _cs_list{entry}? _RBRACE
entry: expr ":" expr
_cs_list{item}: item ("," item)* [","]
cs_list{item}: _cs_list{item}

list: _LBRACKET _cs_list{expr}? _RBRACKET

tuple: _LPAREN _RPAREN
      | _LPAREN expr "," _cs_list{expr}? _RPAREN

call: "@" identifier _LPAREN cs_list{argument}? _RPAREN
argument: name "=" expr

parenthesis: _LPAREN expr _RPAREN

?pow_op: pow_op "**" pow_op -> pow
       | atom
?unary_op: "+" unary_op -> pos
         | "-" unary_op -> neg
         | "~" unary_op -> inv
         | pow_op
?mul_op: mul_op "*" mul_op  -> mul
       | mul_op "/" mul_op  -> truediv
       | mul_op "//" mul_op -> floordiv
       | mul_op "%" mul_op  -> mod
       | unary_op
?add_op: add_op "+" add_op -> add
       | add_op "-" add_op -> sub
       | mul_op
?shift_op: shift_op "<<" shift_op -> lshift
         | shift_op ">>" shift_op -> rshift
         | add_op
?and_op: and_op "&" and_op -> and_
       | shift_op
?xor_op: xor_op "^" xor_op -> xor
       | and_op
?or_op: or_op "|" or_op -> or_
      | xor_op
?cmp_op: cmp_op "==" cmp_op       -> eq
       | cmp_op "!=" cmp_op       -> ne
       | cmp_op "<>" cmp_op       -> ne
       | cmp_op "<" cmp_op        -> lt
       | cmp_op ">" cmp_op        -> gt
       | cmp_op "<=" cmp_op       -> le
       | cmp_op ">=" cmp_op       -> ge
       | cmp_op "in" cmp_op       -> in_
       | cmp_op "not" "in" cmp_op -> not_in
       | or_op
?not_op: "not" not_op -> not_
       | cmp_op
?land_op: land_op "and" land_op -> land
        | not_op
?lor_op: lor_op "or" lor_op -> lor
       | land_op

STRING: "'" _STRING_ESC_INNER "'"
      | "\"" _STRING_ESC_INNER "\""

_LPAREN: "("
_RPAREN: ")"
_LBRACKET: "["
_RBRACKET: "]"
_LBRACE: "{"
_RBRACE: "}"

_NL: /(\r?\n[\t ]*)+/

COMMENT: _COMMENT

%import common.CNAME -> NAME
%import common.NUMBER
%import common._STRING_ESC_INNER
%import common.WS_INLINE
%import python.COMMENT -> _COMMENT

%ignore COMMENT
%ignore WS_INLINE

%declare _INDENT _DEDENT
