start: statement? (_NL+ statement)* _NL*

?statement: import_ | binding

import_: "import" namespace
namespace: (name ".")* name
binding: identifier "=" expr

identifier: [scope "/"] [namespace "."] name
scope: (name "/")* name
name: CNAME

?expr: _nl{lor_op}

?atom: dict
     | list
     | tuple
     | call
     | "(" expr ")"
     | "%" name       -> macro
     | "@" identifier -> reference
     | STRING         -> string
     | SIGNED_NUMBER  -> number
     | "True"         -> true
     | "False"        -> false
     | "None"         -> none

dict: "{" _cs_list{entry}? "}"
entry: expr ":" expr
_cs_list{item}: item ("," item)* ["," _NL*]
cs_list{item}: _cs_list{item}

list: "[" _cs_list{expr}? "]"

tuple: expr "," [expr ("," expr)* ["," _NL*]]
     | "(" ")"

call: "@" identifier "(" cs_list{argument}? ")"
argument: name "=" expr

?pow_op: atom "**" atom -> pow
       | atom
?unary_op: "+" pow_op -> pos
         | "-" pow_op -> neg
         | "~" pow_op -> inv
         | pow_op
?mul_op: unary_op "*" unary_op  -> mul
       | unary_op "/" unary_op  -> truediv
       | unary_op "//" unary_op -> floordiv
       | unary_op "%" unary_op  -> mod
       | unary_op
?add_op: mul_op "+" mul_op -> add
       | mul_op "-" mul_op -> sub
       | mul_op
?shift_op: add_op "<<" add_op -> lshift
         | add_op ">>" add_op -> rshift
         | add_op
?and_op: shift_op "&" shift_op -> and_
       | shift_op
?xor_op: and_op "^" and_op -> xor
       | and_op
?or_op: xor_op "|" xor_op -> or_
       | xor_op
?cmp_op: or_op "==" or_op       -> eq
       | or_op "!=" or_op       -> ne
       | or_op "<>" or_op       -> ne
       | or_op "<" or_op        -> lt
       | or_op ">" or_op        -> gt
       | or_op "<=" or_op       -> le
       | or_op ">=" or_op       -> ge
       | or_op "is" or_op       -> is_
       | or_op "is" "not" or_op -> is_not
       | or_op "in" or_op       -> in_
       | or_op "not" "in" or_op -> not_in
       | or_op
?not_op: "not" cmp_op -> not_
       | cmp_op
?land_op: not_op "and" not_op -> land
        | not_op
?lor_op: land_op "or" land_op -> lor
       | land_op

_nl{item}: _NL* item _NL*

_NL: /(\r?\n)+\s*/

%import common.CNAME
%import common.SIGNED_NUMBER
%import common.WS_INLINE
%import python.COMMENT
%import python.STRING

%ignore COMMENT
%ignore WS_INLINE
