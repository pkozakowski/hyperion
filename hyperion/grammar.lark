start: statement? (statement)*

?statement: import_ | binding

import_: "import" namespace
namespace: (name ".")* name
binding: identifier "=" expr

identifier: [scope "/"] [namespace "."] name
scope: (name "/")* name
name: NAME

?expr: lor_op

?atom: dict
     | list
     | tuple
     | call
     | "(" expr ")"
     | "%" name       -> macro
     | "@" identifier -> reference
     | STRING         -> string
     | SIGNED_NUMBER  -> number
     | "True"         -> true
     | "False"        -> false
     | "None"         -> none

dict: "{" _cs_list{entry}? "}"
entry: expr ":" expr
_cs_list{item}: item ("," item)* [","]
cs_list{item}: _cs_list{item}

list: "[" _cs_list{expr}? "]"

tuple: "(" _cs_list{expr}? ")"

call: "@" identifier "(" cs_list{argument}? ")"
argument: name "=" expr

?pow_op: pow_op "**" pow_op -> pow
       | atom
?unary_op: "+" unary_op -> pos
         | "-" unary_op -> neg
         | "~" unary_op -> inv
         | pow_op
?mul_op: mul_op "*" mul_op  -> mul
       | mul_op "/" mul_op  -> truediv
       | mul_op "//" mul_op -> floordiv
       | mul_op "%" mul_op  -> mod
       | unary_op
?add_op: add_op "+" add_op -> add
       | add_op "-" add_op -> sub
       | mul_op
?shift_op: shift_op "<<" shift_op -> lshift
         | shift_op ">>" shift_op -> rshift
         | add_op
?and_op: and_op "&" and_op -> and_
       | shift_op
?xor_op: xor_op "^" xor_op -> xor
       | and_op
?or_op: or_op "|" or_op -> or_
      | xor_op
?cmp_op: cmp_op "==" cmp_op       -> eq
       | cmp_op "!=" cmp_op       -> ne
       | cmp_op "<>" cmp_op       -> ne
       | cmp_op "<" cmp_op        -> lt
       | cmp_op ">" cmp_op        -> gt
       | cmp_op "<=" cmp_op       -> le
       | cmp_op ">=" cmp_op       -> ge
       | cmp_op "is" cmp_op       -> is_
       | cmp_op "is" "not" cmp_op -> is_not
       | cmp_op "in" cmp_op       -> in_
       | cmp_op "not" "in" cmp_op -> not_in
       | or_op
?not_op: "not" not_op -> not_
       | cmp_op
?land_op: land_op "and" land_op -> land
        | not_op
?lor_op: lor_op "or" lor_op -> lor
       | land_op

%import common.SIGNED_NUMBER
%import common.ESCAPED_STRING -> STRING
%import common.WS
%import python.COMMENT
%import python.NAME

%ignore COMMENT
%ignore WS
